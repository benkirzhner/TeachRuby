require(%{ruby/teach_ruby.rb})
def myCount(str, char)
  __tmp_1 = __v(:"count")
  __tmp_2 = __p(__tmp_1, str, char)
  return __tmp_2
end
def startsWith(str, prefix)
  __tmp_3 = __v(:"length")
  l = __p(__tmp_3, prefix)
  __tmp_6 = __v(:"length")
  __tmp_5 = __p(__tmp_6, str)
  __tmp_4 = l.<=(__tmp_5)
  if __tmp_4 then
    __tmp_7 = __v(:"slice")
    __tmp_8 = __v(0)
    __tmp_10 = __v(1)
    __tmp_9 = l.-(__tmp_10)
    temp = __p(__tmp_7, str, (__tmp_8..__tmp_9))
    __tmp_12 = __v(:"eql?")
    __tmp_11 = __p(__tmp_12, temp, prefix)
    return __tmp_11
  else
    nil
  end
  __tmp_13 = __v(false)
  return __tmp_13
end
def countSubstring(str, substr)
  matches = __v(0)
  index = __v(0)
  __tmp_14 = __v(:"length")
  l = __p(__tmp_14, str)
  while true
    __tmp_15 = index.<(l)
    if __tmp_15 then
      __tmp_16 = __v(:"slice")
      curr = __p(__tmp_16, str, (index..l))
      __tmp_18 = __v(:"startsWith")
      __tmp_17 = __p(__tmp_18, curr, substr)
      if __tmp_17 then
        __tmp_20 = __v(1)
        __tmp_19 = matches.+(__tmp_20)
        matches = __tmp_19
      else
        nil
      end
      __tmp_22 = __v(1)
      __tmp_21 = index.+(__tmp_22)
      index = __tmp_21
    else
      break
    end
  end
  return matches
end
def myRev(str)
  __tmp_24 = __v(:"reverse")
  __tmp_23 = __p(__tmp_24, str)
  return __tmp_23
end
def expand(str)
  newStr = __v(%{})
  __tmp_25 = __v(0)
  __tmp_28 = __v(:"length")
  __tmp_27 = __p(__tmp_28, str)
  __tmp_29 = __v(1)
  __tmp_26 = __tmp_27.-(__tmp_29)
  for i in (__tmp_25..__tmp_26)
    __tmp_30 = __v(:"slice")
    __tmp_31 = __v(1)
    char = __p(__tmp_30, str, i, __tmp_31)
    __tmp_32 = newStr.<<(char)
    __tmp_32
    __tmp_33 = __v(1)
    for j in (__tmp_33..i)
      __tmp_34 = newStr.<<(char)
      __tmp_34
    end
  end
  return newStr
end
def alternating(str1, str2)
  newStr = __v(%{})
  __tmp_35 = __v(:"length")
  l1 = __p(__tmp_35, str1)
  __tmp_36 = __v(:"length")
  l2 = __p(__tmp_36, str2)
  __tmp_37 = l1.>(l2)
  if __tmp_37 then
    (longer, shorter) = str1, str2
  else
    (longer, shorter) = str2, str1
  end
  __tmp_38 = __v(0)
  __tmp_41 = __v(:"length")
  __tmp_40 = __p(__tmp_41, shorter)
  __tmp_42 = __v(1)
  __tmp_39 = __tmp_40.-(__tmp_42)
  for i in (__tmp_38..__tmp_39)
    __tmp_43 = __v(:"slice")
    __tmp_44 = __v(1)
    char1 = __p(__tmp_43, str1, i, __tmp_44)
    __tmp_45 = __v(:"slice")
    __tmp_46 = __v(1)
    char2 = __p(__tmp_45, str2, i, __tmp_46)
    __tmp_48 = newStr.<<(char1)
    __tmp_47 = __tmp_48.<<(char2)
    __tmp_47
  end
  __tmp_50 = __v(:"length")
  __tmp_49 = __p(__tmp_50, longer)
  __tmp_52 = __v(:"length")
  __tmp_51 = __p(__tmp_52, shorter)
  diff = __tmp_49.-(__tmp_51)
  __tmp_55 = __v(:"slice")
  __tmp_57 = __v(:"length")
  __tmp_56 = __p(__tmp_57, shorter)
  __tmp_54 = __p(__tmp_55, longer, __tmp_56, diff)
  __tmp_53 = newStr.<<(__tmp_54)
  __tmp_53
  return newStr
end
__tmp_58 = __v(:"puts")
__tmp_60 = __v(:"myCount")
__tmp_61 = __v(%{Hello world!})
__tmp_62 = __v(%{l})
__tmp_59 = __p(__tmp_60, __tmp_61, __tmp_62)
__p(__tmp_58, __tmp_59)
__tmp_63 = __v(:"puts")
__tmp_65 = __v(:"startsWith")
__tmp_66 = __v(%{Hello world!})
__tmp_67 = __v(%{He})
__tmp_64 = __p(__tmp_65, __tmp_66, __tmp_67)
__p(__tmp_63, __tmp_64)
__tmp_68 = __v(:"puts")
__tmp_70 = __v(:"startsWith")
__tmp_71 = __v(%{Hello world!})
__tmp_72 = __v(%{he})
__tmp_69 = __p(__tmp_70, __tmp_71, __tmp_72)
__p(__tmp_68, __tmp_69)
__tmp_73 = __v(:"puts")
__tmp_75 = __v(:"countSubstring")
__tmp_76 = __v(%{Mississipi})
__tmp_77 = __v(%{issi})
__tmp_74 = __p(__tmp_75, __tmp_76, __tmp_77)
__p(__tmp_73, __tmp_74)
__tmp_78 = __v(:"puts")
__tmp_80 = __v(:"myRev")
__tmp_81 = __v(%{monkey})
__tmp_79 = __p(__tmp_80, __tmp_81)
__p(__tmp_78, __tmp_79)
__tmp_82 = __v(:"puts")
__tmp_84 = __v(:"expand")
__tmp_85 = __v(%{Fred})
__tmp_83 = __p(__tmp_84, __tmp_85)
__p(__tmp_82, __tmp_83)
__tmp_86 = __v(:"puts")
__tmp_88 = __v(:"alternating")
__tmp_89 = __v(%{cow})
__tmp_90 = __v(%{buffalo})
__tmp_87 = __p(__tmp_88, __tmp_89, __tmp_90)
__p(__tmp_86, __tmp_87)
__tmp_91 = __v(:"puts")
__tmp_93 = __v(:"alternating")
__tmp_94 = __v(%{buffalo})
__tmp_95 = __v(%{cow})
__tmp_92 = __p(__tmp_93, __tmp_94, __tmp_95)
__p(__tmp_91, __tmp_92)

